#!/bin/bash
# The she-bang in the begin of this file is here only
# to facilitate syntax highlighting for IDEs. This file
# must be called sourece (using `source` or `.`) to allow
# variables and functions to be present in the current
# terminal session

_LINE="---------------------------------------------"
_USER_BASHD=~/bash.d
_DEBUG_SOURCE=""
_DEBUG_FILE=~/.files_debug
PERF=~/.files_perf

# If the file ~/.files_debug is present, the function files_debug
# will be implmented and will be available to this script, all
# scripts in $FILESROOT/bash.d and ~/bash.d
FILES_DEBUG=0
if [ -f ${_DEBUG_FILE} ]; then
    FILES_DEBUG=1
    files_debug() {
        DEFAULT_COLOR="1;34"
        COLOR=${DEFAULT_COLOR}
        [ "$2" == "error" ] && COLOR="1;31"
        [ "$2" == "success" ] && COLOR="1;32"
        [ "$2" == "warning" ] && COLOR="1;33"
        [ "$2" == "info" ] && COLOR="1;36"
        
        if [ "$FILES_DEBUG" = "1" ]; then
            printf "\033[1;30m["$(date +"%T")" ${_DEBUG_SOURCE}]\033[0m "
            printf "\033[${COLOR}m$1\033[0m\n"
        fi
    }
else
    files_debug() {
        return
    }
    FILES_DEBUG=0
fi

if [ -f $PERF ]; then
    printf "" > $PERF
    if [ -f $PERF ]; then
        echo "FILES performance profiling is ON"
        echo "Saving results to ${PERF}"
    fi  
fi

run_script() {
    SCRIPT=$1
    files_debug "Running script: "${SCRIPT}
    _DEBUG_SOURCE=${SCRIPT##*/}
    [ -f $PERF ] && TI=`perl -MTime::HiRes=time -e 'printf "%f\n", time'`
    . $SCRIPT
    if [ -f $PERF ]; then
        TF=`perl -MTime::HiRes=time -e 'printf "%f\n", time'`
        TOT=`echo "$TF - $TI" | bc`
        echo "${TOT} ${PWD}${SCRIPT:1:-1}" >> $PERF
    fi
    _DEBUG_SOURCE=$_THIS_SCRIPT
}

source_all_scripts() {
    FOLDER_BEFORE=$PWD
    cd $1
    
    # this was working, but removed temporarily to try a performance tweak: spam less process with $(...)
    #SCRIPTS=( $(find . -name "*.sh" | sort) )

    # This is being tested:
    SCRIPTS=( ./**/*.sh )

    files_debug "${#SCRIPTS[@]} initialization scripts found in $1" "info"

    for SCRIPT in "${SCRIPTS[@]}"; do
    	[ -f "${SCRIPT}" ] || [ -L "${SCRIPT}" ] || continue;
    	run_script ${SCRIPT}
    done

    cd $FOLDER_BEFORE
}

_DEBUG_SOURCE="starting..."

files_debug "Checking script call method"
files_debug "BASH_SOURCE=${BASH_SOURCE}" "info"
files_debug "\"\$0\"=$0" "info"
if [ "$0" = "$BASH_SOURCE" ]; then
    _THIS_SCRIPT="${0##*/}"
    _DEBUG_SOURCE=${_THIS_SCRIPT}
    files_debug "ERROR: Incorrect script use!" "error"
    echo "Warning: misuse of ${BASH_SOURCE}!"
    echo "This script must be sourced, not called as a script"
else
    _THIS_SCRIPT="${BASH_SOURCE##*/}"
    _DEBUG_SOURCE=${_THIS_SCRIPT}
    files_debug "OK: Script is being sourced" "success"
fi


_ORIGINAL_FOLDER=$PWD
files_debug "Initial folder: ${_ORIGINAL_FOLDER}"

files_debug "Detecting main folders"
export FILESBASHD=$(dirname $(realpath -m $BASH_SOURCE))
files_debug "\$FILESBASHD=${FILESBASHD}" "info"
export FILESROOT="$(realpath -m ${FILESBASHD}/..)"
files_debug "\$FILESROOT=${FILESROOT}" "info"

files_debug $_LINE

if [ -f "${FILESBASHD}/run_bash" ]; then
    source_all_scripts "${FILESBASHD}"
else
    files_debug "Error trying to find BASH.D folder" "error"
fi

if [ ! -f "${FILESROOT}/bash.d/run_bash" ]; then
    files_debug "Error trying to find FILES root folder" "error"
fi

files_debug $_LINE

if [ -d ${_USER_BASHD} ]; then
    source_all_scripts "${_USER_BASHD}"
else
    files_debug "This user doesn't have a custom BASH.D at ${_USER_BASHD}" "info"
fi

files_debug $_LINE

# Set everything back to normal
cd $_ORIGINAL_FOLDER
unset _ORIGINAL_FOLDER
unset _LINE
unset -f source_all_scripts
# the files_debug function is not unset, so it still produces output when calling stuff from bash.d directly

files_debug "run_bash concluded" "info"
files_debug ""
