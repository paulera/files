#!/bin/bash 

# This is a much more elaborated version of the function ffa. Needs testing in 
# other OSs

if [ "$OS" == "mac" ]; then
    # sed on mac requires a value for the -i param, which we will provide
    # as empty
    __EXT__=''
fi

IFS=$'\n'
RESULT=( $(grep \
    --color=never \
    --exclude-dir=".git" \
    --exclude-dir="vendor" \
    --exclude-dir="node_modules" \
    -B2 -F2 \
    -i -n -H -a -R -I --null "$*" * | \
    tr "\0" "|" #| \
    # sed -E 's/^([^\|]*)\|([0-9]*)([:-])(.*)/\1 | \3\2\3 | \4/g'
) )

# -----------------------------------------------------------
# debug: show raw result lines, before iterating through them
#for line in "${RESULT[@]}"; do echo $line; done
# -----------------------------------------------------------

COUNT=0

# when this flag is 1, reads from the current line the file info
# (filename, filename length, file count, etc)
START_FILE_BLOCK=1

echo -n "" > /tmp/files_that
for i in "${!RESULT[@]}"; do

    if [[ "${RESULT[i]}" =~ ^--$ ]]; then
        # ignores this line and gets ready to extract file
        # info from the next one
        START_FILE_BLOCK=1
        continue
    fi

    if [ "${START_FILE_BLOCK}" == "1" ]; then
        COUNT=$((COUNT+1))
        FILE=$(echo ${RESULT[i]} | sed 's/|.*$//')
        FILE_LEN=${#FILE}
        echo -ne "\n${cPurple}($COUNT)${c0} ${cCyan}${FILE}\n\n"
        echo ${FILE} >> /tmp/files_that
        START_FILE_BLOCK=0
    fi

    CONTENT="${RESULT[i]:$((FILE_LEN+1))}"
    num='([0-9]+)'

    if [[ "${CONTENT}" =~ $num([:-])(.*)$ ]]; then
        LINE_NUM=${BASH_REMATCH[1]}
        FOUND=0 && [ "${BASH_REMATCH[2]}" == ":" ] && FOUND=1
        TEXT=${BASH_REMATCH[3]}
        
        if [ "$FOUND" == "0" ]; then
            echo -ne ${cGray}
            printf "%5d : " $LINE_NUM
            echo -e "$TEXT${c0}"
        else
            printf "${cCyan}%5d | ${c0}" $LINE_NUM
            echo -n "$TEXT" | GREP_COLOR="1;31" grep --color=always "$*"
            echo -en "${c0}"
        fi
        
    else
        # for regex matching errors. should not happen.
        echo -e "error ! ${cRed}${CONTENT}${c0}"
    fi
    
done

echo -e "\n${cPurple}Found ${COUNT} occurences${c0}\n"
