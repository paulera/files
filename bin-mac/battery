#!/bin/bash
# TODO: calculate the charging rate (mAh/minute) and estimated time to full

LC_ALL=en_US.UTF-8
INTERVAL=5
last_state=""

notify() {
  osascript -e "display notification \"$1\" with title \"Battery Monitor\""
}

unset BATTERY_LOOP
if [ "$1" == "loop" ] || [ "$1" == "--loop" ] || [ "$1" == "-l" ]; then
    BATTERY_LOOP=1
fi

while :; do
    
    current=$(ioreg -r -n AppleSmartBattery | awk '/"CurrentCapacity"/ {print $3}')
    max=$(ioreg -r -n AppleSmartBattery | awk '/"MaxCapacity"/ {print $3}')
    is_charging=$(ioreg -r -n AppleSmartBattery | awk -F'= ' '/"IsCharging"/ {print $2}')
    is_connected=$(ioreg -r -n AppleSmartBattery | awk -F'= ' '/"ExternalConnected"/ {print $2}')
    current_ma=$(ioreg -r -n AppleSmartBattery | sed -n 's/.*"LegacyBatteryInfo" = {[^}]*"Amperage"=\([-0-9]*\).*/\1/p')
    current_a=$(echo "scale=2; $current_ma / 1000" | bc)
    percent=$(( 100 * current / max ))

    [ $BATTERY_LOOP ] && clear

    echo "üîã Battery: $percent%"
    echo "$current of $max mAh"

    if [ "$is_connected" = "No" ]; then
        state="disconnected"
        message="üö´ Charger NOT connected"
        printf "${cRed}"
    elif [ "$current" = "$max" ] || (( $percent >= 98 )); then
        state="full"
        message="‚úÖ Fully charged"
        printf "${cGreen}"
    elif [ "$is_charging" = "No" ]; then
        state="not_charging"
        message="‚ö†Ô∏è  Connected but NOT charging!" 
        printf "${cYellow}"
    else
        state="charging"
        message="‚ö°Ô∏è Charging ... (${current_a} A)"
        printf "${cCyan}"
    fi
    
    printf "${message}${c0}"
    [ "$state" != "$last_state" ] && notify "${message}"

    if [ $BATTERY_LOOP ]; then
        last_state="$state"
        read -t $INTERVAL -n 1 -s -r -p "
"
    else
        printf "${c0}\n"
        exit
    fi

done
