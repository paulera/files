#!/bin/bash

# -----------------------------------------------------------------------------
#   • Memory usage     (matching Activity Monitor’s “Memory Used”)
#   • Swap usage       (sysctl vm.swapusage)
#   • Disk (/) usage   (df)
#   • CPU usage        (top -l 2 → user% + sys%)
# -----------------------------------------------------------------------------

__gr="\033[1;32m"   # bright green
__re="\033[1;31m"   # bright red
__ye="\033[1;33m"   # bright yellow
__wh="\033[1;37m"   # bright white
__ga="\033[1;30m"   # bright gray
__="\033[0m"        # reset

# Print colored text without newline, then reset
say() {
    echo -ne "$1${__}"
}

# -----------------------------------------------------------------------------
# 2. Build a 20‐tick bar based on percent (0–100)
# -----------------------------------------------------------------------------
make_bar() {
    TOTAL_TICKS=20
    LIMIT_1=10
    LIMIT_2=15

    INTVALUE=${1%.*}                            # strip decimals
    TICKS=$(( TOTAL_TICKS * INTVALUE / 100 ))   # how many “|” to draw

    say "${__wh}["
    for i in $(seq 1 $TOTAL_TICKS); do
        if (( i > TICKS )); then
            # unfilled tick
            echo -ne "${__ga}."
            continue
        elif (( i < LIMIT_1 )); then
            COLOR=${__gr}
        elif (( i < LIMIT_2 )); then
            COLOR=${__ye}
        else
            COLOR=${__re}
        fi
        say "${COLOR}|"
    done
    say "${__wh}]"
}

# -----------------------------------------------------------------------------
# 3. MEMORY USAGE (vm_stat + hw.memsize)
#    → Count “Pages free + Pages inactive + Pages speculative” AS FREE.
#      Everything else (wired, active, compressed) is “used.”
# -----------------------------------------------------------------------------
# Get page size in bytes (e.g. 4096)
PAGE_SIZE_BYTES=$(vm_stat 2>/dev/null | head -1 | awk -F '[ =]+' '{print $8}')

# Grab counts (strip trailing “.” via gsub):
PAG_FREE=$(vm_stat 2>/dev/null | awk '/Pages free/        { gsub("\\.","",$3); print $3 }')
PAG_INACT=$(vm_stat 2>/dev/null | awk '/Pages inactive/    { gsub("\\.","",$3); print $3 }')
PAG_SPEC=$(vm_stat 2>/dev/null | awk '/Pages speculative/ { gsub("\\.","",$3); print $3 }')

# Total physical memory in bytes
TOTAL_MEM_BYTES=$(sysctl -n hw.memsize)

# According to Activity Monitor:
#   • “Cached Files” = Pages inactive
#   • “Free” = Pages free + Pages speculative
#   • “Memory Used” = total − (“free” + “inactive”) = wired + active + compressed.
FREE_PAGES=$(( PAG_FREE + PAG_INACT + PAG_SPEC ))
FREE_BYTES=$(( FREE_PAGES * PAGE_SIZE_BYTES ))
USED_BYTES=$(( TOTAL_MEM_BYTES - FREE_BYTES ))

# Convert to MB for human‐readable “X M out of Y M”
USED_MB=$(( USED_BYTES / 1024 / 1024 ))
TOTAL_MB=$(( TOTAL_MEM_BYTES / 1024 / 1024 ))
MEM_USED_HR="${USED_MB}M"
MEM_TOTAL_HR="${TOTAL_MB}M"

# Percentage used (two decimals)
MEM_USED_PERC=$(awk -v u="$USED_BYTES" -v t="$TOTAL_MEM_BYTES" \
                'BEGIN { printf "%.2f", 100 * u / t }')

say "Memory $(make_bar ${MEM_USED_PERC}) ${__ga}${MEM_USED_PERC}% (${MEM_USED_HR} out of ${MEM_TOTAL_HR})"
echo ""

# -----------------------------------------------------------------------------
# 4. SWAP USAGE (sysctl vm.swapusage)
# -----------------------------------------------------------------------------
SWAP_INFO_RAW=$(sysctl -n vm.swapusage)

# Sample: “vm.swapusage: total = 1024.00M  used = 256.00M  free = 768.00M  (encrypted)”
SWAP_TOTAL_HR=$(echo "$SWAP_INFO_RAW" | awk '{ print $3 }')
SWAP_USED_HR=$(echo  "$SWAP_INFO_RAW" | awk '{ print $6 }')
SWAP_FREE_HR=$(echo  "$SWAP_INFO_RAW" | awk '{ print $9 }')

# Convert “###.##M” or “#.##G” → bytes
to_bytes() {
    local val="${1%[MG]}" unit="${1##${1%[MG]}}"
    if [[ "$unit" == "M" ]]; then
        echo $(( $(awk "BEGIN{printf \"%d\", ${val} * 1024 * 1024}") ))
    elif [[ "$unit" == "G" ]]; then
        echo $(( $(awk "BEGIN{printf \"%d\", ${val} * 1024 * 1024 * 1024}") ))
    else
        echo "$val"
    fi
}

SWAP_TOTAL_BYTES=$(to_bytes "$SWAP_TOTAL_HR")
SWAP_USED_BYTES=$(to_bytes "$SWAP_USED_HR")

if (( SWAP_TOTAL_BYTES > 0 )); then
    SWAP_USED_PERC=$(awk -v u="$SWAP_USED_BYTES" -v t="$SWAP_TOTAL_BYTES" \
                    'BEGIN { printf "%.2f", 100 * u / t }')
else
    SWAP_USED_PERC="0.00"
fi

say "Swap   $(make_bar ${SWAP_USED_PERC}) ${__ga}${SWAP_USED_PERC}% (${SWAP_USED_HR} out of ${SWAP_TOTAL_HR})"
echo ""

# -----------------------------------------------------------------------------
# 5. DISK USAGE (root “/”) – exactly same as before
# -----------------------------------------------------------------------------
read -r DISK_TOTAL_HR DISK_USED_HR DISK_FREE_HR <<< $(
    df -h / | awk 'NR==2 { print $2, $3, $4 }'
)

DISK_USED_PERC=$(df / | awk 'NR==2 { printf "%.2f", 100 * $3 / $2 }')

say "Disk   $(make_bar ${DISK_USED_PERC}) ${__ga}${DISK_USED_PERC}% (${DISK_USED_HR} out of ${DISK_TOTAL_HR})"
echo ""

# -----------------------------------------------------------------------------
# 6. CPU USAGE (via top -l 2 → sum of user% + sys%)
# -----------------------------------------------------------------------------
#
# “top -l 2 -n 0”:
#  • First sample warms up.
#  • Second sample prints a line like: “CPU usage:  5.7% user,  2.1% sys, 92.2% idle”
# We grab that final “CPU usage” line and extract fields 3 (user%) + 5 (sys%).
#
CPU_LINE=$(top -l 2 -n 0 2>/dev/null | awk '/^CPU usage/ { line=$0 } END { print line }')

# If CPU_LINE is empty or we fail to parse, default to 0
if [[ -z "$CPU_LINE" ]]; then
    CPU_BUSY_PERC="0.00"
else
    USER_PERC=$(echo "$CPU_LINE" | awk -F '[ %,]+' '{ print $3 }')
    SYS_PERC=$(echo  "$CPU_LINE" | awk -F '[ %,]+' '{ print $5 }')
    CPU_BUSY_PERC=$(awk -v u="$USER_PERC" -v s="$SYS_PERC" \
                    'BEGIN { printf "%.2f", u + s }')
fi

say "CPU    $(make_bar ${CPU_BUSY_PERC}) ${__ga}${CPU_BUSY_PERC}%"
echo ""

